version: "3.9"

services:
  db:
    image: postgres
    ports:
      - 5432:5432
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASS}
      - POSTGRES_DB=${DB_NAME}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5

  app:
    build: .
    command: bash -c "python manage.py makemigrations && python manage.py migrate && 
             python manage.py runserver 0.0.0.0:8000"
    ports:
      - 8000:8000
    depends_on:
      db:
        condition: service_healthy
    links:
      - db
    environment:
      ALLOWED_HOSTS: ${ALLOWED_HOSTS}
      DB_USER: ${DB_USER}
      DB_PASS: ${DB_PASS}
      DB_NAME: ${DB_NAME}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      EMAIL_HOST: ${EMAIL_HOST}
      EMAIL_HOST_USER: ${EMAIL_HOST_USER}
      EMAIL_HOST_PASSWORD: ${EMAIL_HOST_PASSWORD}
      EMAIL_PORT: ${EMAIL_PORT}
      CELERY_BROKER: ${CELERY_BROKER}
      CELERY_BACKEND: ${CELERY_BACKEND}

  celery:
    build: .
    command: celery -A orders worker --loglevel=info
    environment:
      ALLOWED_HOSTS: ${ALLOWED_HOSTS}
      DB_USER: ${DB_USER}
      DB_PASS: ${DB_PASS}
      DB_NAME: ${DB_NAME}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      EMAIL_HOST: ${EMAIL_HOST}
      EMAIL_HOST_USER: ${EMAIL_HOST_USER}
      EMAIL_HOST_PASSWORD: ${EMAIL_HOST_PASSWORD}
      EMAIL_PORT: ${EMAIL_PORT}
      CELERY_BROKER: ${CELERY_BROKER}
      CELERY_BACKEND: ${CELERY_BACKEND}
    depends_on:
      - app
      - redis

  redis:
    image: redis
    restart: always
